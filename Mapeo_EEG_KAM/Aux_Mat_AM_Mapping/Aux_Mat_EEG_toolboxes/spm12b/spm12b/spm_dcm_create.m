function spm_dcm_create(syn_model, source_model, SNR)
% Specify a DCM model without having to use an SPM.mat file
% FORMAT spm_dcm_create(syn_model, source_model, SNR)
%
% syn_model     - name of the synthetic DCM to be created 
% source_model  - define new model ('GUI')
%                 or import existing model via file selector ('import')
%                 or import existing model (directly specified by directory
%                 and name) 
%                 [default: 'GUI']
% SNR           - signal-to-noise ratio [default: 1]
%
% This function allows to create DCM networks with known connectivity
% parameters from which synthetic data are then generated by calling 
% spm_dcm_generate.
%
% This function is very much like spm_dcm_specify but inputs etc. are 
% specified either via the user interface or from an existing model. 
% Currently, the interface provided by this function does not allow for 
% manual specification of nonlinear DCMs; however, these can be imported 
% from existing files.
%__________________________________________________________________________
% Copyright (C) 2002-2011 Wellcome Trust Centre for Neuroimaging

% Will Penny & Klaas Enno Stephan
% $Id: spm_dcm_create.m 4493 2011-09-16 15:33:32Z guillaume $


Finter = spm_figure('GetWin','Interactive');
header = get(Finter,'Name');
set(Finter,'Name','Dynamic Causal Modelling')

% check parameters and insert default values, if necessary
%==========================================================================
if nargin == 0
    syn_model    = spm_input('Name for target DCM_???.mat','+1','s');
    SNR          = spm_input('Signal-to-noise ratio (SNR)? ','+1','r',[],1);
    source_model = 'GUI';
else
    try, source_model; catch, source_model = 'GUI'; end
    try, SNR;          catch, SNR = 1;              end
end


% outputs
%==========================================================================
switch upper(source_model)
    
    case 'GUI'
        
        % Define model by GUI
        %==================================================================
        
        % get cell array of region structures
        %------------------------------------------------------------------
        n = spm_input('Enter number of regions','+1','r',[],1);
        for i=1:n
            str         = sprintf('Region %d',i);
            xY(i).name  = spm_input(['Name for ',str],'+1','s');
            % Make up spurious VOI info
            % for compatibility with spm_dcm_display
            xY(i).xyz   = [i i i]'*10;
            xY(i).XYZmm = [i i i]'*10;
            xY(i).s     = 1;
            xY(i).spec  = 1;
            % for compatibility with spm_dcm_specify
            xY(i).Sess  = 1;
            xY(i).u     = 1;
            xY(i).X0    = [];
        end

        DCM = spm_dcm_specify([],xY);

        
    case 'IMPORT'
        
        % Import existing model - prompt user to choose it
        %==================================================================
        P     = spm_select(1,'^DCM.*\.mat$','Select source DCM_???.mat');
        load(P)

    otherwise
        
        % Import existing model (directly specified by directory & name)
        %==================================================================
        try
            load(source_model)
        catch
            error('Cannot load source model');
        end
        
end


% Now set up output structure 
%--------------------------------------------------------------------------
X0    = ones(DCM.v,1);
switch upper(source_model)
    case 'GUI'
        % All fields have to be modified
        %DCM.v    = xxx;
        Y        = DCM.Y;
        DCM.Ep.A = DCM.a;
        DCM.Ep.B = DCM.b;
        DCM.Ep.C = DCM.c;
        DCM.Ep.D = DCM.d;
        DCM.Ep.decay = sparse(DCM.n,1);
        DCM.Ep.transit = sparse(DCM.n,1);
        DCM.Ep.epsilon = sparse(1,1);
    otherwise
        try
            Y.dt = DCM.Y.dt;
        catch
            Y.dt = DCM.delays(1);
        end
end
Y.X0  = X0;
for i = 1:DCM.n
    Y.name{i} = DCM.xY(i).name;
end
Y.Q   = spm_Ce(ones(1,DCM.n)*DCM.v);
DCM.Y = Y;


%-Save
%--------------------------------------------------------------------------
dcm_filename = ['DCM_' syn_model '.mat'];
save(dcm_filename,'DCM', spm_get_defaults('mat.format'));

% Generate synthetic output data
%==========================================================================
spm_dcm_generate(dcm_filename,SNR);

spm('FigName',header);
